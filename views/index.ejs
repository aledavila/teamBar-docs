<!DOCTYPE html>
<html>
  <head>
    <title>MVB Documentation</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <div class="container">
        <div class="content">
            <div class="side-content">
                <h3 class="title">Getting Started</h3>
                <h5 class="sub-title"><a href="#intro">- introduction</a></h5>
                <h3 class="title">End Points</h3>
                <h5 class="sub-title" id="team">- teams</h5>
                <ul class="team-list">
                    <li><a href="#teams-index">/api/v1/teams</a></li>
                    <li><a href="#teams-show">/api/v1/teams/:id</a></li>
                    <li><a href="#teams-bars">/api/v1/teams/:id/bars</a></li>
                </ul>
                <h5 class="sub-title" id="bar">- bars</h5>
                <ul class="bar-list">
                    <li><a href="#bars-index">/api/v1/bars</a></li>
                    <li><a href="#bars-show">/api/v1/bars/:id</a></li>
                    <li><a href="#bars-teams">/api/v1/bars/:id/teams</a></li>
                </ul>
            </div>
            <div class="main-content">
                <h3 class="title">Most Valuable Bar (MVB)</h3>

                <div class="sub-content">
                    <p>
                        Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.
                    </p>
                    <p>
                        The project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.
                    </p>
                    <p>
                        You can report bugs and discuss features on the GitHub issues page, on Freenode IRC in the #documentcloud channel, post questions to the Google Group, add pages to the wiki or send tweets to @documentcloud.
                    </p>
                </div>
                <h3 class="title" id="intro">Getting Started</h3>

                <div class="sub-content">
                    <p>
                        When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                    <p>
                        Many of the code examples in this documentation are runnable, because Backbone is included on this page. Click the play button to execute them.
                    </p>
                </div>
                <h3 class="title">Teams</h3>

                <div class="sub-content">
                    <p>
                        When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.
                    </p>

                    <h4 class="ep" id="teams-index">
                        <pre><code>/api/v1/teams</code></pre>
                    </h4>
                    <p>
                        When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                    <h4 class="ep" id="teams-show">
                        <pre><code>/api/v1/teams/:id</code></pre>
                    </h4>
                    <p>
                        When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                    <h4 class="ep" id="teams-bars">
                        <pre><code>/api/v1/teams/:id/bars</code></pre>
                    </h4>
                    <p>
                        When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                </div>
                <h3 class="title">Bars</h3>

                <div class="sub-content">
                    <p>
                        When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.
                    </p>

                    <h4 class="ep" id="bars-index">
                        <pre><code>/api/v1/bars</code></pre>
                    </h4>
                    <p>
                        Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                    <h4 class="ep" id="bars-show">
                        <pre><code>/api/v1/bars/:id</code></pre>
                    </h4>
                    <p>
                        Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                    <h4 class="ep" id="bars-teams">
                        <pre><code>/api/v1/bars/:id/team</code></pre>
                    </h4>
                    <p>
                        Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.
                    </p>
                    <p>
                        If you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
    <script type="text/javascript" src="./javascripts/main.js"></script>
  </body>
</html>
